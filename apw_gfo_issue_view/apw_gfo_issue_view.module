<?php

function apw_gfo_issue_view_menu_alter(&$items) {
    $items['user/password']['access callback'] = FALSE;
}

function apw_gfo_issue_view_menu() {
    $items['issue'] = array(
        'page callback' => '_old_gfo_article_uri',
        'page arguments' => array(1, 2),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK
    );
    $items['unsubscribe'] = array(
        'page callback' => '_unsubscribe_account',
        'page arguments' => array(1, 3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

function _unsubscribe_account($event_type_id, $email_hash) {

    if (isset($email_hash)) {
        $sql = "SELECT system_user_id, event_type_id, can_unsubscribe from
web_users wu
INNER JOIN system_user_has_event_type st ON st.system_user_id = wu.uid
WHERE md5(wu.mail) = :mail AND st.event_type_id = :event_type_id";

        //remove the last 3 digit from the hash since they are just paddings
        $email_hash = substr($email_hash, 0, -3);
        
        $user = db_query($sql, array(':mail' => $email_hash, ':event_type_id' => $event_type_id))->fetchObject();

        if ($user->system_user_id) {
            //first check to see if the user is allowed to unsubscribe
            if('1' === $user->can_unsubscribe) {
                //unsubscribe user from newsletter
                $sql = "DELETE from system_user_has_event_type WHERE event_type_id = :event_type_id AND system_user_id = :system_user_id";
                db_query($sql, array(':event_type_id' => $event_type_id, ':system_user_id' => $user->system_user_id));

                drupal_set_message(t("You have successfully unsubscribed from the newsletter."), "status");
            } else {
                drupal_set_message(t("HALT: You are not allowed to unsubscribe this email address from this service."), "error");
            }
         } else {
            drupal_set_message(t("Invalid identification hash supplied or you are currently not subscribed to the newsletter"), "error");
         }
    } else {
        //halt
        drupal_access_denied();
    }

    return t("");
}

function apw_gfo_issue_view_node_view($node, $view_mode, $langcode) {
    
    if('full' === $view_mode) {
 
       //if (16 == $node->nid) {
            //drupal_goto('node/1233'); //we had to do this because for whatever reason the active menu trail won't be set
        //}

        if (930 == $node->nid) {//this is the current issue nid is 930// nid 1231 is the GFO Newsletter page
                //|| 3064 == $node->nid) {
            //lets get the latest issue of GFO
            $latest_gfo_issue = _latest_gfo_issue(2);

            $articles = _gfo_issue_articles($latest_gfo_issue[0][0]);

            if (0 == sizeof($articles)) {
                $articles = _gfo_issue_articles($latest_gfo_issue[1][0]);
            }
            
            drupal_goto('node/' . $articles[0][0]);
        }

        if (931 == $node->nid
                || 2976 == $node->nid
                || 2981 == $node->nid
                || 2984 == $node->nid) {//this is the global fund observer back issue page. nid is 931
            //get the last 6 back issues
            $back_issues = _latest_gfo_issue(6);
            $back_issues = array_reverse($back_issues);
            //array_pop($back_issues);
            $back_issues = array_reverse($back_issues);

            $gfo_issue = _gfo_issue_formatter($back_issues, true);

            $back_issue_listing = theme('gfo_back_issue_listing');
            
            $node->content['country_portfolio_section'] = array (
                  '#markup' => $gfo_issue . '<br/>' . $back_issue_listing,
                  '#weight' => 1,
                );
        }

        if ('gfo_issue' == $node->type) {

            //first we need to get all the download links for this issue
            $download_links = _fetch_issue_downloads($node->field_issue_number['und'][0]['value']);

            //next get all the articles in this issue, then display them appropriately
            $articles = _gfo_issue_articles($node->nid);

            if (0 != sizeof($articles)) {
//                $lang = '';
//                if('en' != $node->language) {
//                    $lang = $node->language;
//                }
//                drupal_goto($lang . '/node/' . $articles[0][0]);
                  drupal_goto('node/' . $articles[0][0]);
                }
        }
    } 
//    else if ('delete' == $op) {
//        //lets check if a gfo issue has been deleted so that we also delete the articles linked to it, if applicable
//        if ('gfo_issue' == $node->type) {
//            $articles = _gfo_issue_articles($node->nid);
//
//            foreach ($articles as $article) {
//                node_delete($article[0]);
//            }
//        }
//    }
}

function apw_gfo_issue_view_form_alter(&$form, &$form_state, $form_id) {

    if ($form_id == 'node_delete_confirm') {
        $node = $form['#parameters'][2];

        if ('gfo_issue' == $node->type) {
            $form['description']['#value'] = '<strong>' . t('This operation will also delete all the articles in this issue.') . '</strong>';
        }
    }
}

function apw_gfo_issue_view_theme() {
    return array(
        'gfo_article_apw_teaser' => array('variables' => array('download_links' => NULL, 'articles' => NULL, 'collapse_fieldset' => NULL, 'issue' => NULL)),
        'latest_gfo_issue_title' => array('variables' => array('latest_gfo_issue' => NULL)),
        'gfo_back_issue_listing' => array('variables' => array()),
        'gfo_live_article_listing' => array('variables' => array()),
    );
}

function _gfo_issue_formatter($issues, $collapse_fieldset) {

    $gfo_issue = '';

    foreach ($issues as $issue) {

        $download_links = _fetch_issue_downloads($issue[2]);

        $articles = _gfo_issue_articles($issue[0]);
        
        $articles_text = theme('gfo_article_apw_teaser', array('download_links' => $download_links, 'articles' => $articles, 'collapse_fieldset' => $collapse_fieldset, 'nl_issue' => $issue));

        if ($collapse_fieldset) {
            $gfo_issue .= '<div class="apw_gfo_issue_outline">' . $articles_text . '</div>';
        } else {
            $gfo_issue .= $articles_text;
        }
    }

    return $gfo_issue;
}

function _old_gfo_article_uri($issue, $article) {
drupal_set_message(($article));
    if (is_numeric($issue) && is_numeric($article)) {
        $sql = "SELECT web_field_data_field_article_issue_id.entity_id
FROM web_field_data_field_article_issue_id
INNER JOIN web_field_data_field_article_number 
ON web_field_data_field_article_number.entity_id = web_field_data_field_article_issue_id.entity_id
WHERE field_article_issue_id_nid = (SELECT web_field_data_field_issue_number.entity_id
FROM web_field_data_field_issue_number
WHERE web_field_data_field_issue_number.field_issue_number_value = " . $issue . ")
AND field_article_number_value = " . $article;

        $data = db_query($sql)->fetchObject();

        if ($data->entity_id) {
            drupal_goto('node/' . $data->entity_id);
        } else {
            drupal_set_message(t("Invalid issue"), "error");
        }
    } else {
        //halt
        drupal_access_denied();
    }

    return t("Invalid issue");
}

function _fetch_issue_downloads($issue_number) {
    // open the gfo directory for a particular issue
    $main_path = variable_get('file_public_path', conf_path() . '/files') . DIRECTORY_SEPARATOR . 'gfo' . DIRECTORY_SEPARATOR . $issue_number;

    $lang_dirs = array();

    if (file_exists($main_path)) {
        $issue_handle = opendir($main_path);

        if ($issue_handle) {

            // loop through all of the files
            while (false !== ($dname = readdir($issue_handle))) {

                //first pick up all the directories
                // if the file is not this file, and does not start with a '.' or '..',
                // then store it for later display
                if (($dname != '.') && ($dname != '..') &&
                        ($dname != basename($_SERVER['PHP_SELF']))) {
                    // store the directories first

                    if (is_dir($main_path . DIRECTORY_SEPARATOR . $dname)) {
                        //get all the file in this directory
                        $files = array();

                        $dhandle = opendir($main_path . DIRECTORY_SEPARATOR . $dname);
                        while (false !== ($filename = readdir($dhandle))) {
                            if (($filename != '.') && ($filename != '..') && ($filename != basename($_SERVER['PHP_SELF']))) {
                                if (is_file($main_path . DIRECTORY_SEPARATOR . $dname . DIRECTORY_SEPARATOR . $filename)) {
                                    $gfo_file_name = $main_path . DIRECTORY_SEPARATOR . $dname . DIRECTORY_SEPARATOR . $filename;
                                    //lets omit the html file
                                    if (!(strpos($filename, '.htm', strlen($filename) - 4))) {
                                        $files[] = $gfo_file_name;
                                    }
                                }
                            }
                        }

                        $lang_dirs[$dname] = $files;
                    }
                }
            }
            // close the directory
            closedir($issue_handle);
        }
    }

    return $lang_dirs;
    //var_dump(file_directory_path());
}

function _gfo_issue_articles($issue_id) {

    $result = db_query("SELECT ai.entity_id as node_id
FROM {field_data_field_article_issue_id} ai
INNER JOIN {field_data_field_article_number} an ON ai.entity_id = an.entity_id
WHERE field_article_issue_id_nid = :issue_nid
ORDER BY field_article_number_value", array(":issue_nid" => $issue_id));
    
    $article_info = array();

    foreach ($result as $data) {
        $row = array();

        $node = node_load($data->node_id);

        $row[] = $node->nid;
        
        $row[] = db_query("SELECT name FROM web_gfo_article_type WHERE id = :a_id", array(":a_id" => $node->field_article_type_id['und'][0]['value']))->fetchField();
        $row[] = $node->title;//$data->article_title;
        $row[] = $node->field_article_author['und'][0]['value'];
        $row[] = $node->field_article_abstract['und'][0]['value'];//$data->article_abstract;
        $row[] = $node->field_article_number['und'][0]['value'];
        
        $article_info[] = $row;
    }

    return $article_info;
}

function _get_issue_lang() {
    global $language;
    
    $lang = 'en';    
    if('fr' == $language->language) {
        $lang = 'fr';//we need to do this, because ES and RU are yet to have their own GFO, thus the default will be the EN gfo
    }
    
    return $lang;
}

function _latest_gfo_issue($limit) {
    
    $lang = _get_issue_lang();
    
    $sql = "SELECT wn.nid
FROM {node} wn
WHERE wn.type = 'gfo_issue' AND wn.status = 1 AND wn.language = '" . $lang . "'
ORDER BY wn.nid DESC
LIMIT " . $limit;

    $result = db_query($sql);
    $gfo_issue = array();

    foreach ($result as $data) {
        $row = array();

        $issue_node = node_load($data->nid);
                
        $row[] = $issue_node->nid;
        $row[] = $issue_node->title;
        $row[] = $issue_node->field_issue_number['und'][0]['value'];
        $row[] = strtotime($issue_node->field_issue_date['und'][0]['value']);

        $gfo_issue[] = $row;
    }

    return $gfo_issue;
}

function is_current_gfo_issue($issue_number) {
    $latest_gfo_issue = _latest_gfo_issue(1);
    
    return ($latest_gfo_issue[0][2] == $issue_number);
}

function build_current_issue_secondary_link($issue_id) {
    global $language;

    $node_link = 'node/' . _translation_nodelink(1233);
    if (isset($issue_id)) {
        $node_link = 'node/' . _translation_nodelink(1231);
    }

    $sql = "SELECT mlid, link_path, link_title, options FROM {menu_links}
WHERE menu_name = 'primary-links'
AND plid = 408
AND module = 'menu'
ORDER BY weight;";

    $result = db_query($sql);

    $menus = array();

    while ($data = db_fetch_object($result)) {
        $active_trail = '';

        $menu = array();

        if ($data->link_path == $node_link) {
            $active_trail = ' active-trail';
        }

        $menu['href'] = $data->link_path;
        $menu['title'] = i18nstrings('menu:item:' . $data->mlid . ':title', $data->link_title, $language->language);

        $menus['menu-' . $data->mlid . $active_trail] = $menu;

        $options = unserialize($data->options);

        if (!empty($options['langcode'])) {
            if ($options['langcode'] != $language->language) {
                unset($menus['menu-' . $data->mlid . $active_trail]);
            }
        }
    }

    return $menus;

//    return array(
//        'menu-2482' =>
//        array(
//            'href' => 'node/1233',
//            'title' => 'GFO Live'),
//        'menu-1907 active-trail' =>
//        array(
//            'href' => 'node/1231',
//            'title' => 'GFO Newsletter'),
//        'menu-2561' =>
//        array(
//            'langcode' => 'fr',
//            'href' => 'node/1234',
//            'title' => 'GFO Advanced Search'),
//        'menu-1910' =>
//        array(
//            'langcode' => 'en',
//            'href' => 'node/933',
//            'title' => 'Contact GFO')
//    );
}

function build_current_issue_tertiary_link($issue_id) {
    global $language;
    
    //first detect if this is a current issue or an back issue
    $issue_node = node_load($issue_id);

    $current_issue_trail = 'menu-423423';
    $back_issue_trail = 'menu-423424';

    if (is_current_gfo_issue($issue_node->field_issue_number[0]['value'])) {
        $current_issue_trail = 'active-trail';
    } else {
        $back_issue_trail = 'active-trail';
    }

    return array(
        $current_issue_trail =>
        array(
            'title' => i18nstrings('menu:item:2356:title', 'Current Issue', $language->language),
            'href' => 'node/' . _translation_nodelink(930)
        ),
        $back_issue_trail =>
        array(
            'title' => i18nstrings('menu:item:1908:title', 'Back Issues', $language->language),
            'href' => 'node/' . _translation_nodelink(931)
        ),
        'menu-1909' =>
        array(
            'title' => i18nstrings('menu:item:1909:title', 'Subscribe', $language->language),
            'href' => 'node/' . _translation_nodelink(932)
        )
    );
}
